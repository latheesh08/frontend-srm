{"ast":null,"code":"var _jsxFileName = \"/Users/star/Desktop/frontend-srm/src/app/home/studentHome/AnnouncementCard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useHistory } from \"react-router-dom\";\nimport Reminder from \"./Reminder\";\nimport { dateDiff } from \"../../../shared/datediff\";\nimport remindersvg from \"../../../assets/images/home/reminder.svg\"; // import testImg from \"../../assets/images/home/testImg.png\";\n\nconst useStyle = makeStyles(theme => ({\n  card: {\n    width: \"100%\",\n    margin: \"auto\",\n    marginTop: \"20px\",\n    borderRadius: \"10px\",\n    boxShadow: \"none\"\n  },\n  reminder: {\n    float: \"right\",\n    padding: \"2px\"\n  },\n  cardContent: {\n    padding: \"16px 16px 16px 16px\"\n  },\n  contentMargin: {\n    marginTop: \"16px\"\n  },\n  cardHeader: {\n    width: \"100%\"\n  },\n  title: {\n    fontWeight: \"bold\",\n    fontStyle: \"normal\",\n    fontSize: \"14px\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      textDecoration: \"underline\"\n    }\n  },\n  announcementText: {\n    fontStyle: \"normal\",\n    fontSize: \"14px\"\n  },\n  announcementImg: {\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    \"& img\": {\n      maxWidth: \"100%\",\n      border: `1px solid ${theme.palette.common.deluge}`,\n      borderRadius: \"4px\"\n    }\n  }\n}));\n\nconst AnnouncementCard = props => {\n  const classes = useStyle();\n  const history = useHistory();\n  const [openReminder, setOpenReminder] = useState(false);\n  const [reminderDays, setReminderDays] = useState(null);\n  const [reminderIcon, setReminderIcon] = useState(true); // const [announcementShow, setShow] = useState(false);\n  // useEffect(() => {\n  //   if (announcementShow) {\n  //     announceShow();\n  //   }\n  // }, [announcementShow]);\n\n  useEffect(() => {\n    if (props.announcement.event_date) {\n      const response = dateDiff(props.announcement.event_date);\n\n      if (!response) {\n        setReminderIcon(false);\n      }\n    } else {\n      setReminderIcon(false);\n    }\n  }, []);\n\n  const handleReminderOpen = () => {\n    const response = dateDiff(props.announcement.event_date);\n\n    if (response) {\n      setOpenReminder(true);\n      setReminderDays(response);\n    }\n  };\n\n  const handleReminderClose = checkboxes => {\n    setOpenReminder(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignContent: \"center\",\n    className: classes.cardContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.cardContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.cardHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, reminderIcon ? /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.reminder,\n    src: remindersvg,\n    alt: \"reminder\",\n    onClick: handleReminderOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }) : \"\", /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    className: classes.title,\n    onClick: () => {\n      history.push(`/news/${props.announcement.id}`);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, props.announcement.title, props.announcement.event_date ? \":\" + props.announcement.event_date : \"\")), props.announcement.media_url && /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    className: `${classes.announcementImg} ${classes.contentMargin}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: props.announcement.media_url,\n    alt: \"Announcement\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    className: classes.contentMargin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.announcementText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, props.announcement.summary, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }), `Published Date:${props.announcement.published_date}`))))), openReminder ? /*#__PURE__*/React.createElement(Reminder, {\n    open: openReminder,\n    onClose: handleReminderClose,\n    days: reminderDays,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }) : \"\");\n};\n\nexport default AnnouncementCard;","map":{"version":3,"sources":["/Users/star/Desktop/frontend-srm/src/app/home/studentHome/AnnouncementCard.js"],"names":["React","useState","useEffect","Grid","Card","CardContent","makeStyles","Typography","useHistory","Reminder","dateDiff","useStyle","theme","card","width","margin","marginTop","borderRadius","boxShadow","reminder","float","padding","cardContent","contentMargin","cardHeader","title","fontWeight","fontStyle","fontSize","cursor","textDecoration","announcementText","announcementImg","justifyContent","textAlign","maxWidth","border","palette","common","deluge","AnnouncementCard","props","classes","history","openReminder","setOpenReminder","reminderDays","setReminderDays","reminderIcon","setReminderIcon","announcement","event_date","response","handleReminderOpen","handleReminderClose","checkboxes","cardContainer","remindersvg","push","id","media_url","summary","published_date"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,QAAT,QAAyB,0BAAzB;oEAEA;;AAEA,MAAMC,QAAQ,GAAGL,UAAU,CAAEM,KAAD,KAAY;AACtCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,MAAM,EAAE,MAFJ;AAGJC,IAAAA,SAAS,EAAE,MAHP;AAIJC,IAAAA,YAAY,EAAE,MAJV;AAKJC,IAAAA,SAAS,EAAE;AALP,GADgC;AAQtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,OADC;AAERC,IAAAA,OAAO,EAAE;AAFD,GAR4B;AAYtCC,EAAAA,WAAW,EAAE;AACXD,IAAAA,OAAO,EAAE;AADE,GAZyB;AAetCE,EAAAA,aAAa,EAAE;AACbP,IAAAA,SAAS,EAAE;AADE,GAfuB;AAkBtCQ,EAAAA,UAAU,EAAE;AACVV,IAAAA,KAAK,EAAE;AADG,GAlB0B;AAqBtCW,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE,MADP;AAELC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,QAAQ,EAAE,MAHL;AAILC,IAAAA,MAAM,EAAE,SAJH;AAKL,eAAW;AACTC,MAAAA,cAAc,EAAE;AADP;AALN,GArB+B;AA8BtCC,EAAAA,gBAAgB,EAAE;AAChBJ,IAAAA,SAAS,EAAE,QADK;AAEhBC,IAAAA,QAAQ,EAAE;AAFM,GA9BoB;AAkCtCI,EAAAA,eAAe,EAAE;AACfC,IAAAA,cAAc,EAAE,QADD;AAEfC,IAAAA,SAAS,EAAE,QAFI;AAGf,aAAS;AACPC,MAAAA,QAAQ,EAAE,MADH;AAEPC,MAAAA,MAAM,EAAG,aAAYxB,KAAK,CAACyB,OAAN,CAAcC,MAAd,CAAqBC,MAAO,EAF1C;AAGPtB,MAAAA,YAAY,EAAE;AAHP;AAHM;AAlCqB,CAAZ,CAAD,CAA3B;;AA6CA,MAAMuB,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAMC,OAAO,GAAG/B,QAAQ,EAAxB;AACA,QAAMgC,OAAO,GAAGnC,UAAU,EAA1B;AACA,QAAM,CAACoC,YAAD,EAAeC,eAAf,IAAkC5C,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAAC6C,YAAD,EAAeC,eAAf,IAAkC9C,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAC+C,YAAD,EAAeC,eAAf,IAAkChD,QAAQ,CAAC,IAAD,CAAhD,CALkC,CAMlC;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuC,KAAK,CAACS,YAAN,CAAmBC,UAAvB,EAAmC;AACjC,YAAMC,QAAQ,GAAG1C,QAAQ,CAAC+B,KAAK,CAACS,YAAN,CAAmBC,UAApB,CAAzB;;AACA,UAAI,CAACC,QAAL,EAAe;AACbH,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,KALD,MAKO;AACLA,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GATQ,EASN,EATM,CAAT;;AAWA,QAAMI,kBAAkB,GAAG,MAAM;AAC/B,UAAMD,QAAQ,GAAG1C,QAAQ,CAAC+B,KAAK,CAACS,YAAN,CAAmBC,UAApB,CAAzB;;AACA,QAAIC,QAAJ,EAAc;AACZP,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,MAAAA,eAAe,CAACK,QAAD,CAAf;AACD;AACF,GAND;;AAOA,QAAME,mBAAmB,GAAIC,UAAD,IAAgB;AAC1CV,IAAAA,eAAe,CAAC,KAAD,CAAf;AACD,GAFD;;AAIA,sBACE,uDACE,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,OAAO,EAAC,QAHV;AAIE,IAAA,YAAY,EAAC,QAJf;AAKE,IAAA,SAAS,EAAEH,OAAO,CAACc,aALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEd,OAAO,CAAC7B,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAE6B,OAAO,CAACpB,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAEoB,OAAO,CAAClB,UAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGwB,YAAY,gBACX;AACE,IAAA,SAAS,EAAEN,OAAO,CAACvB,QADrB;AAEE,IAAA,GAAG,EAAEsC,WAFP;AAGE,IAAA,GAAG,EAAC,UAHN;AAIE,IAAA,OAAO,EAAEJ,kBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,GAQX,EAlBJ,eAoBE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAC,IADV;AAEE,IAAA,SAAS,EAAEX,OAAO,CAACjB,KAFrB;AAGE,IAAA,OAAO,EAAE,MAAM;AACbkB,MAAAA,OAAO,CAACe,IAAR,CAAc,SAAQjB,KAAK,CAACS,YAAN,CAAmBS,EAAG,EAA5C;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGlB,KAAK,CAACS,YAAN,CAAmBzB,KAPtB,EAQGgB,KAAK,CAACS,YAAN,CAAmBC,UAAnB,GACG,MAAMV,KAAK,CAACS,YAAN,CAAmBC,UAD5B,GAEG,EAVN,CApBF,CADF,EAqCGV,KAAK,CAACS,YAAN,CAAmBU,SAAnB,iBACC,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,SAAS,EAAC,KAFZ;AAGE,IAAA,SAAS,EAAG,GAAElB,OAAO,CAACV,eAAgB,IAAGU,OAAO,CAACnB,aAAc,EAHjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AACE,IAAA,GAAG,EAAEkB,KAAK,CAACS,YAAN,CAAmBU,SAD1B;AAEE,IAAA,GAAG,EAAC,cAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAtCJ,eAiDE,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAC,KAA1B;AAAgC,IAAA,SAAS,EAAElB,OAAO,CAACnB,aAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEmB,OAAO,CAACX,gBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,KAAK,CAACS,YAAN,CAAmBW,OADtB,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAII,kBAAiBpB,KAAK,CAACS,YAAN,CAAmBY,cAAe,EAJvD,CADF,CAjDF,CADF,CAPF,CADF,EAqEGlB,YAAY,gBACX,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEA,YADR;AAEE,IAAA,OAAO,EAAEU,mBAFX;AAGE,IAAA,IAAI,EAAER,YAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,GAOX,EA5EJ,CADF;AAiFD,CApHD;;AAsHA,eAAeN,gBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Reminder from \"./Reminder\";\nimport { dateDiff } from \"../../../shared/datediff\";\nimport remindersvg from \"../../../assets/images/home/reminder.svg\";\n// import testImg from \"../../assets/images/home/testImg.png\";\n\nconst useStyle = makeStyles((theme) => ({\n  card: {\n    width: \"100%\",\n    margin: \"auto\",\n    marginTop: \"20px\",\n    borderRadius: \"10px\",\n    boxShadow: \"none\",\n  },\n  reminder: {\n    float: \"right\",\n    padding: \"2px\",\n  },\n  cardContent: {\n    padding: \"16px 16px 16px 16px\",\n  },\n  contentMargin: {\n    marginTop: \"16px\",\n  },\n  cardHeader: {\n    width: \"100%\",\n  },\n  title: {\n    fontWeight: \"bold\",\n    fontStyle: \"normal\",\n    fontSize: \"14px\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  announcementText: {\n    fontStyle: \"normal\",\n    fontSize: \"14px\",\n  },\n  announcementImg: {\n    justifyContent: \"center\",\n    textAlign: \"center\",\n    \"& img\": {\n      maxWidth: \"100%\",\n      border: `1px solid ${theme.palette.common.deluge}`,\n      borderRadius: \"4px\",\n    },\n  },\n}));\n\nconst AnnouncementCard = (props) => {\n  const classes = useStyle();\n  const history = useHistory();\n  const [openReminder, setOpenReminder] = useState(false);\n  const [reminderDays, setReminderDays] = useState(null);\n  const [reminderIcon, setReminderIcon] = useState(true);\n  // const [announcementShow, setShow] = useState(false);\n  // useEffect(() => {\n  //   if (announcementShow) {\n  //     announceShow();\n  //   }\n  // }, [announcementShow]);\n\n  useEffect(() => {\n    if (props.announcement.event_date) {\n      const response = dateDiff(props.announcement.event_date);\n      if (!response) {\n        setReminderIcon(false);\n      }\n    } else {\n      setReminderIcon(false);\n    }\n  }, []);\n\n  const handleReminderOpen = () => {\n    const response = dateDiff(props.announcement.event_date);\n    if (response) {\n      setOpenReminder(true);\n      setReminderDays(response);\n    }\n  };\n  const handleReminderClose = (checkboxes) => {\n    setOpenReminder(false);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"center\"\n        alignContent=\"center\"\n        className={classes.cardContainer}\n      >\n        <Card className={classes.card}>\n          <CardContent className={classes.cardContent}>\n            <div className={classes.cardHeader}>\n              {/* <Link\n                to={{\n                  pathname: `/news/${props.announcement.id}`,\n                  announcementData: props.announcement,\n                }}\n              >\n                {props.announcement.title}\n              </Link> */}\n\n              {reminderIcon ? (\n                <img\n                  className={classes.reminder}\n                  src={remindersvg}\n                  alt=\"reminder\"\n                  onClick={handleReminderOpen}\n                ></img>\n              ) : (\n                \"\"\n              )}\n              <Typography\n                variant=\"h6\"\n                className={classes.title}\n                onClick={() => {\n                  history.push(`/news/${props.announcement.id}`);\n                }}\n              >\n                {props.announcement.title}\n                {props.announcement.event_date\n                  ? \":\" + props.announcement.event_date\n                  : \"\"}\n              </Typography>\n            </div>\n\n            {/* Conditional rendering of Grid based on availablity image */}\n\n            {props.announcement.media_url && (\n              <Grid\n                container\n                direction=\"row\"\n                className={`${classes.announcementImg} ${classes.contentMargin}`}\n              >\n                <img\n                  src={props.announcement.media_url}\n                  alt=\"Announcement\"\n                ></img>\n              </Grid>\n            )}\n            <Grid container direction=\"row\" className={classes.contentMargin}>\n              <Typography className={classes.announcementText}>\n                {props.announcement.summary}\n                <br />\n                <br />\n                {`Published Date:${props.announcement.published_date}`}\n              </Typography>\n            </Grid>\n          </CardContent>\n        </Card>\n      </Grid>\n      {openReminder ? (\n        <Reminder\n          open={openReminder}\n          onClose={handleReminderClose}\n          days={reminderDays}\n        />\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default AnnouncementCard;\n"]},"metadata":{},"sourceType":"module"}