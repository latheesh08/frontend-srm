{"ast":null,"code":"import { put, call, takeEvery, all, delay, takeLatest } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport * as actions from './actions';\nimport * as actionTypes from './actionTypes';\nimport AuthService from '../AuthService';\nimport * as moment from 'moment';\nconst USE_API = process.env.REACT_APP_USE_API;\nexport function* watchAuth() {\n  yield all([takeEvery(actionTypes.AUTH_INITIATE_LOGOUT, logoutSaga), takeLatest(actionTypes.AUTH_USER, authUserSaga), takeEvery(actionTypes.AUTH_CHECK_STATE, authCheckStateSaga), takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeoutSaga), takeEvery(actionTypes.AUTH_ROLE_SELECTION, authInitiateRoleSelectionSaga)]);\n}\n/* Validates auth credentials with api */\n\nexport function* authUserSaga(action) {\n  //Initiate AUTH_START action\n  yield put(actions.authStart());\n  const authData = {\n    username: action.userName,\n    password: action.password\n  };\n\n  try {\n    let response = '';\n\n    if (USE_API === 'Y') {\n      response = yield AuthService.login(authData);\n    }\n\n    if (response.status === 200) {\n      const expirationDate = yield new Date(response.data.expires_at);\n      yield localStorage.setItem('srmToken', response.data.access_token);\n      yield localStorage.setItem('srmUserInfo', JSON.stringify(response.data.user));\n      yield localStorage.setItem('srmExpirationDate', expirationDate);\n      yield localStorage.setItem('srmSelectedRole', JSON.stringify(response.data.user.roles[0].name)); //Initiate AUTH_SUCCCESS action\n\n      yield put(actions.authSuccess({\n        token: response.data.access_token,\n        userInfo: response.data.user,\n        redirectUrl: '/home',\n        selectedRole: response.data.user.roles[0].name\n      }));\n\n      if (response.data.user.roles.length > 1) {\n        yield put(actions.authInitiateRoleSelection());\n      } //Initiate the Expiry Time of token\n\n\n      yield put(actions.checkAuthTimeout(response.data.expires_at, true));\n      yield put(push('/home'));\n    } else {\n      //Initiate AUTH_FAIL action for Invalid credentials\n      yield put(actions.authFail('Invalid Credentials'));\n    }\n  } catch (error) {\n    //Initiate AUTH_FAIL action\n    console.log(error); //clear local storage if created\n\n    yield call([localStorage, localStorage.clear]);\n    yield put(actions.authFail('Invalid Credentials'));\n  }\n}\n/*If token already exists, use the token. If the user token expired, logout. */\n\nexport function* authCheckStateSaga(action) {\n  const token = yield localStorage.getItem('srmToken');\n\n  if (!token) {\n    yield put(actions.logout(action.isAuthenticated));\n  } else {\n    const expirationDate = yield new Date(localStorage.getItem('srmExpirationDate'));\n\n    if (expirationDate <= new Date()) {\n      yield put(actions.logout(action.isAuthenticated));\n    } else {\n      const userInfo = yield JSON.parse(localStorage.getItem('srmUserInfo'));\n      const selectedRole = yield JSON.parse(localStorage.getItem('srmSelectedRole'));\n      yield put(actions.authSuccess({\n        token: token,\n        userInfo: userInfo,\n        redirectUrl: '/home',\n        selectedRole: selectedRole\n      }));\n      const currentPath = yield localStorage.getItem('srmCurrentRoute');\n\n      if (currentPath == null) {\n        yield put(push('/home'));\n      } else {\n        yield put(push(currentPath));\n      }\n    }\n  }\n}\n/* Clears local storage and calls the logout succeed action */\n\nexport function* logoutSaga(action) {\n  yield call([localStorage, localStorage.clear]);\n\n  if (action.isAuthenticated) {\n    yield put(push('/login'));\n  }\n\n  yield put(actions.logoutSucceed());\n}\n/* Sets expiration time and logs out after expiration time. */\n\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(moment(action.expirationDate).diff(moment()));\n  yield put(actions.logout(action.isAuthenticated));\n}\n/* Stores the selectedrole in local storage and calls the sucess action*/\n\nexport function* authInitiateRoleSelectionSaga(action) {\n  yield localStorage.setItem('srmSelectedRole', JSON.stringify(action.selectedRole));\n  yield put(actions.authRoleSelectionSucceed(action.selectedRole));\n}","map":{"version":3,"sources":["/Users/star/Desktop/frontend-srm/src/app/auth/store/sagas.js"],"names":["put","call","takeEvery","all","delay","takeLatest","push","actions","actionTypes","AuthService","moment","USE_API","process","env","REACT_APP_USE_API","watchAuth","AUTH_INITIATE_LOGOUT","logoutSaga","AUTH_USER","authUserSaga","AUTH_CHECK_STATE","authCheckStateSaga","AUTH_CHECK_TIMEOUT","checkAuthTimeoutSaga","AUTH_ROLE_SELECTION","authInitiateRoleSelectionSaga","action","authStart","authData","username","userName","password","response","login","status","expirationDate","Date","data","expires_at","localStorage","setItem","access_token","JSON","stringify","user","roles","name","authSuccess","token","userInfo","redirectUrl","selectedRole","length","authInitiateRoleSelection","checkAuthTimeout","authFail","error","console","log","clear","getItem","logout","isAuthenticated","parse","currentPath","logoutSucceed","diff","authRoleSelectionSucceed"],"mappings":"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","sourcesContent":["import {\n  put,\n  call,\n  takeEvery,\n  all,\n  delay,\n  takeLatest,\n} from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport * as actions from './actions';\nimport * as actionTypes from './actionTypes';\nimport AuthService from '../AuthService';\nimport * as moment from 'moment';\nconst USE_API = process.env.REACT_APP_USE_API;\n\nexport function* watchAuth() {\n  yield all([\n    takeEvery(actionTypes.AUTH_INITIATE_LOGOUT, logoutSaga),\n    takeLatest(actionTypes.AUTH_USER, authUserSaga),\n    takeEvery(actionTypes.AUTH_CHECK_STATE, authCheckStateSaga),\n    takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeoutSaga),\n    takeEvery(actionTypes.AUTH_ROLE_SELECTION, authInitiateRoleSelectionSaga),\n  ]);\n}\n\n/* Validates auth credentials with api */\nexport function* authUserSaga(action) {\n  //Initiate AUTH_START action\n  yield put(actions.authStart());\n\n  const authData = {\n    username: action.userName,\n    password: action.password,\n  };\n\n  try {\n    let response = '';\n    if (USE_API === 'Y') {\n      response = yield AuthService.login(authData);\n    }\n\n    if (response.status === 200) {\n      const expirationDate = yield new Date(response.data.expires_at);\n      yield localStorage.setItem('srmToken', response.data.access_token);\n      yield localStorage.setItem(\n        'srmUserInfo',\n        JSON.stringify(response.data.user)\n      );\n      yield localStorage.setItem('srmExpirationDate', expirationDate);\n      yield localStorage.setItem(\n        'srmSelectedRole',\n        JSON.stringify(response.data.user.roles[0].name)\n      );\n\n      //Initiate AUTH_SUCCCESS action\n      yield put(\n        actions.authSuccess({\n          token: response.data.access_token,\n          userInfo: response.data.user,\n          redirectUrl: '/home',\n          selectedRole: response.data.user.roles[0].name,\n        })\n      );\n\n      if (response.data.user.roles.length > 1) {\n        yield put(actions.authInitiateRoleSelection());\n      }\n\n      //Initiate the Expiry Time of token\n      yield put(actions.checkAuthTimeout(response.data.expires_at, true));\n\n      yield put(push('/home'));\n    } else {\n      //Initiate AUTH_FAIL action for Invalid credentials\n      yield put(actions.authFail('Invalid Credentials'));\n    }\n  } catch (error) {\n    //Initiate AUTH_FAIL action\n    console.log(error);\n    //clear local storage if created\n    yield call([localStorage, localStorage.clear]);\n    yield put(actions.authFail('Invalid Credentials'));\n  }\n}\n\n/*If token already exists, use the token. If the user token expired, logout. */\nexport function* authCheckStateSaga(action) {\n  const token = yield localStorage.getItem('srmToken');\n  if (!token) {\n    yield put(actions.logout(action.isAuthenticated));\n  } else {\n    const expirationDate = yield new Date(\n      localStorage.getItem('srmExpirationDate')\n    );\n\n    if (expirationDate <= new Date()) {\n      yield put(actions.logout(action.isAuthenticated));\n    } else {\n      const userInfo = yield JSON.parse(localStorage.getItem('srmUserInfo'));\n      const selectedRole = yield JSON.parse(\n        localStorage.getItem('srmSelectedRole')\n      );\n      yield put(\n        actions.authSuccess({\n          token: token,\n          userInfo: userInfo,\n          redirectUrl: '/home',\n          selectedRole: selectedRole,\n        })\n      );\n      const currentPath = yield localStorage.getItem('srmCurrentRoute');\n      if (currentPath == null) {\n        yield put(push('/home'));\n      } else {\n        yield put(push(currentPath));\n      }\n    }\n  }\n}\n\n/* Clears local storage and calls the logout succeed action */\nexport function* logoutSaga(action) {\n  yield call([localStorage, localStorage.clear]);\n  if (action.isAuthenticated) {\n    yield put(push('/login'));\n  }\n\n  yield put(actions.logoutSucceed());\n}\n\n/* Sets expiration time and logs out after expiration time. */\nexport function* checkAuthTimeoutSaga(action) {\n  yield delay(moment(action.expirationDate).diff(moment()));\n  yield put(actions.logout(action.isAuthenticated));\n}\n\n/* Stores the selectedrole in local storage and calls the sucess action*/\nexport function* authInitiateRoleSelectionSaga(action) {\n  yield localStorage.setItem(\n    'srmSelectedRole',\n    JSON.stringify(action.selectedRole)\n  );\n  yield put(actions.authRoleSelectionSucceed(action.selectedRole));\n}\n"]},"metadata":{},"sourceType":"module"}