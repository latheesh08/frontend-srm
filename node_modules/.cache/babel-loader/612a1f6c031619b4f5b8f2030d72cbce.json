{"ast":null,"code":"var _jsxFileName = \"/Users/star/Desktop/frontend-srm/src/app/home/teacherHome/tasks/TaskEditor.js\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, Button, Grid, TextField } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport HomeSerivce from '../../HomeSerivce';\n\nfunction Alert(props) {\n  return /*#__PURE__*/React.createElement(MuiAlert, Object.assign({\n    elevation: 6,\n    variant: \"filled\"\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }\n  }));\n}\n\nconst useStyle = makeStyles(theme => ({\n  CardContent: {\n    padding: '10px 0 0 0 !important',\n    margin: '0',\n    height: '100%'\n  },\n  menuBar: {\n    display: 'flex'\n  },\n  menuItems: {\n    // padding: 'auto',\n    textAlign: 'center'\n  },\n  menuBtn: {\n    width: '100px'\n  },\n  removeBtn: {\n    backgroundColor: 'red',\n    color: 'white',\n    border: '1px solid red',\n    '&:hover': {\n      backgroundColor: 'white',\n      border: ' 1px solid red',\n      color: 'red'\n    }\n  },\n  textAreaGrid: {\n    width: '100%'\n  },\n  textArea: {\n    width: '90%',\n    height: '100%',\n    margin: 'auto'\n  },\n  footer: {\n    marginTop: '5px',\n    paddingRight: '20px',\n    textAlign: 'right'\n  }\n}));\n\nconst Tasks = props => {\n  const classes = useStyle();\n  const {\n    taskId,\n    content,\n    status,\n    closeEditor,\n    createNew,\n    ...others\n  } = props;\n  const [taskContent, setContent] = useState('');\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [multilineLabel, setMultilineLabel] = useState('Add a task');\n\n  const handleChangeTask = event => {\n    setContent(event.target.value);\n  };\n\n  const handlePaste = event => {// console.log(event.target.value);\n  };\n\n  async function saveTask() {\n    const token = localStorage.getItem('srmToken');\n    const response = await HomeSerivce.createTask(token, {\n      content: taskContent\n    }); // console.log('Create Task: ', response);\n\n    closeEditor();\n  }\n\n  async function saveEditedTask() {\n    const token = localStorage.getItem('srmToken');\n    const response = await HomeSerivce.updateTask(token, taskId, {\n      content: taskContent,\n      status: status\n    }); // console.log('Update Task: ', response);\n\n    closeEditor();\n  }\n\n  async function deleteTask() {\n    const token = localStorage.getItem('srmToken');\n    const response = await HomeSerivce.deleteTask(token, taskId); // console.log('Delete Task: ', response);\n\n    closeEditor();\n  }\n\n  const handleSave = event => {\n    // console.log(taskContent.length);\n    if (taskContent.length < 300) {\n      if (createNew) {\n        saveTask();\n      } else {\n        saveEditedTask();\n      }\n    } else {\n      setOpenSnackbar(true);\n    }\n  };\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  const handleDeleteTask = event => {\n    deleteTask();\n  };\n\n  useEffect(() => {\n    if (!createNew) {\n      setMultilineLabel('Edit a task');\n      setContent(content);\n    }\n  }, [createNew]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.CardContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.menuBar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    className: classes.menuItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, createNew ? /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: closeEditor,\n    color: \"secondary\",\n    disableElevation: true,\n    className: classes.menuBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, \"Discard\") : /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: handleDeleteTask,\n    color: \"secondary\",\n    disableElevation: true,\n    className: classes.menuBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }, \"Delete\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    className: classes.menuItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, \"Task Editor\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    className: classes.menuItems,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSave,\n    disableElevation: true,\n    className: classes.menuBtn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }, \"Save\"))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.textAreaGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    id: \"outlined-multiline-static\",\n    label: multilineLabel,\n    className: classes.textArea,\n    multiline: true,\n    rows: 13,\n    value: taskContent,\n    onPaste: handlePaste,\n    onChange: handleChangeTask,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.footer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, \"Character: \", taskContent.length, \"/300\"))), /*#__PURE__*/React.createElement(Snackbar, {\n    open: openSnackbar,\n    autoHideDuration: 6000,\n    onClose: handleSnackbarClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    onClose: handleSnackbarClose,\n    severity: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, \"Maximum 300 characters allowed\")));\n};\n\nexport default Tasks;","map":{"version":3,"sources":["/Users/star/Desktop/frontend-srm/src/app/home/teacherHome/tasks/TaskEditor.js"],"names":["React","useState","useEffect","makeStyles","Typography","Button","Grid","TextField","CardContent","Snackbar","MuiAlert","HomeSerivce","Alert","props","useStyle","theme","padding","margin","height","menuBar","display","menuItems","textAlign","menuBtn","width","removeBtn","backgroundColor","color","border","textAreaGrid","textArea","footer","marginTop","paddingRight","Tasks","classes","taskId","content","status","closeEditor","createNew","others","taskContent","setContent","openSnackbar","setOpenSnackbar","multilineLabel","setMultilineLabel","handleChangeTask","event","target","value","handlePaste","saveTask","token","localStorage","getItem","response","createTask","saveEditedTask","updateTask","deleteTask","handleSave","length","handleSnackbarClose","reason","handleDeleteTask","title"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { Typography, Button, Grid, TextField } from '@material-ui/core';\nimport CardContent from '@material-ui/core/CardContent';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport HomeSerivce from '../../HomeSerivce';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant='filled' {...props} />;\n}\n\nconst useStyle = makeStyles((theme) => ({\n  CardContent: {\n    padding: '10px 0 0 0 !important',\n    margin: '0',\n    height: '100%',\n  },\n  menuBar: {\n    display: 'flex',\n  },\n  menuItems: {\n    // padding: 'auto',\n    textAlign: 'center',\n  },\n  menuBtn: {\n    width: '100px',\n  },\n  removeBtn: {\n    backgroundColor: 'red',\n    color: 'white',\n    border: '1px solid red',\n    '&:hover': {\n      backgroundColor: 'white',\n      border: ' 1px solid red',\n      color: 'red',\n    },\n  },\n  textAreaGrid: {\n    width: '100%',\n  },\n  textArea: {\n    width: '90%',\n    height: '100%',\n    margin: 'auto',\n  },\n  footer: {\n    marginTop: '5px',\n    paddingRight: '20px',\n    textAlign: 'right',\n  },\n}));\n\nconst Tasks = (props) => {\n  const classes = useStyle();\n  const { taskId, content, status, closeEditor, createNew, ...others } = props;\n  const [taskContent, setContent] = useState('');\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n  const [multilineLabel, setMultilineLabel] = useState('Add a task');\n\n  const handleChangeTask = (event) => {\n    setContent(event.target.value);\n  };\n\n  const handlePaste = (event) => {\n    // console.log(event.target.value);\n  };\n\n  async function saveTask() {\n    const token = localStorage.getItem('srmToken');\n    const response = await HomeSerivce.createTask(token, {\n      content: taskContent,\n    });\n    // console.log('Create Task: ', response);\n    closeEditor();\n  }\n\n  async function saveEditedTask() {\n    const token = localStorage.getItem('srmToken');\n    const response = await HomeSerivce.updateTask(token, taskId, {\n      content: taskContent,\n      status: status,\n    });\n    // console.log('Update Task: ', response);\n    closeEditor();\n  }\n\n  async function deleteTask() {\n    const token = localStorage.getItem('srmToken');\n    const response = await HomeSerivce.deleteTask(token, taskId);\n    // console.log('Delete Task: ', response);\n    closeEditor();\n  }\n\n  const handleSave = (event) => {\n    // console.log(taskContent.length);\n    if (taskContent.length < 300) {\n      if (createNew) {\n        saveTask();\n      } else {\n        saveEditedTask();\n      }\n    } else {\n      setOpenSnackbar(true);\n    }\n  };\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  const handleDeleteTask = (event) => {\n    deleteTask();\n  };\n\n  useEffect(() => {\n    if (!createNew) {\n      setMultilineLabel('Edit a task');\n      setContent(content);\n    }\n  }, [createNew]);\n\n  return (\n    <>\n      <CardContent className={classes.CardContent}>\n        <Grid className={classes.menuBar}>\n          <Grid item xs={4} className={classes.menuItems}>\n            {createNew ? (\n              <Button\n                variant='contained'\n                onClick={closeEditor}\n                color='secondary'\n                disableElevation\n                className={classes.menuBtn}\n              >\n                Discard\n              </Button>\n            ) : (\n              <Button\n                variant='contained'\n                onClick={handleDeleteTask}\n                color='secondary'\n                disableElevation\n                className={classes.menuBtn}\n              >\n                Delete\n              </Button>\n            )}\n          </Grid>\n          <Grid item xs={4} className={classes.menuItems}>\n            <Typography className={classes.title}>Task Editor</Typography>\n          </Grid>\n          <Grid item xs={4} className={classes.menuItems}>\n            <Button\n              variant='contained'\n              color='primary'\n              onClick={handleSave}\n              disableElevation\n              className={classes.menuBtn}\n            >\n              Save\n            </Button>\n          </Grid>\n        </Grid>\n        <hr />\n        <Grid container className={classes.textAreaGrid}>\n          <TextField\n            id='outlined-multiline-static'\n            label={multilineLabel}\n            className={classes.textArea}\n            multiline\n            rows={13}\n            value={taskContent}\n            onPaste={handlePaste}\n            onChange={handleChangeTask}\n            variant='outlined'\n          />\n        </Grid>\n        <div className={classes.footer}>\n          <Typography>Character: {taskContent.length}/300</Typography>\n        </div>\n      </CardContent>\n      <Snackbar\n        open={openSnackbar}\n        autoHideDuration={6000}\n        onClose={handleSnackbarClose}\n      >\n        <Alert onClose={handleSnackbarClose} severity='error'>\n          Maximum 300 characters allowed\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default Tasks;\n"]},"metadata":{},"sourceType":"module"}