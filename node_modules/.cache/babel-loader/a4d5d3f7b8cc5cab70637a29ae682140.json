{"ast":null,"code":"var _jsxFileName = \"/Users/star/Desktop/frontend-srm/src/app/home/studentHome/Announcements.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Typography } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport AnnouncementCard from \"./AnnouncementCard\";\nimport HomeService from \"../HomeSerivce\";\nimport { set } from \"date-fns\";\nconst useStyles = makeStyles(theme => ({\n  loading: {\n    width: \"100%\",\n    textAlign: \"center\",\n    paddingTop: \"8px\",\n    fontSize: \"20px\"\n  }\n}));\n\nconst Announcements = props => {\n  const location = useLocation();\n  const classes = useStyles();\n  const [announcements, setAnnouncements] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1); // const [isAnnouncementLoading, setIsAnnouncementLoading] = useState(true);\n\n  useEffect(() => {\n    // if (isAnnouncementLoading) {\n    let isAnnouncementLoading = true;\n\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"srmToken\");\n        const selectedRole = props.selectedRole;\n        const response = await HomeService.fetchAnnouncements({\n          selectedRole,\n          currentPage\n        }, token);\n\n        if (response.status === 200) {\n          if (response.data.data.current_page === response.data.data.last_page) {\n            if (isAnnouncementLoading) {\n              setAnnouncements([...announcements, ...response.data.data.data]);\n              setHasMore(false);\n            }\n          } else {\n            if (isAnnouncementLoading) {\n              setAnnouncements([...announcements, ...response.data.data.data]);\n              setCurrentPage(currentPage + 1);\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    fetchData();\n    return () => {\n      isAnnouncementLoading = false;\n    };\n  }, []);\n\n  const fetchAnnouncementOnScroll = async () => {\n    try {\n      const token = localStorage.getItem(\"srmToken\");\n      const selectedRole = props.selectedRole;\n      const response = await HomeService.fetchAnnouncements({\n        selectedRole,\n        currentPage\n      }, token);\n\n      if (response.status === 200) {\n        if (response.data.data.current_page !== response.data.data.last_page) {\n          setAnnouncements([...announcements, ...response.data.data.data]);\n          setCurrentPage(currentPage + 1);\n        } else {\n          setAnnouncements([...announcements, ...response.data.data.data]);\n          setHasMore(false);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  let content = announcements.map((announcement, index) => {\n    return /*#__PURE__*/React.createElement(AnnouncementCard, {\n      key: index,\n      announcement: announcement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: announcements.length,\n    next: fetchAnnouncementOnScroll,\n    hasMore: hasMore,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"primary\",\n      size: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    })),\n    scrollableTarget: \"scrollable\",\n    scrollThreshold: 0.2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, content);\n};\n\nconst mapStateToProps = state => {\n  return {\n    selectedRole: state.auth.selectedRole\n  };\n};\n\nexport default connect(mapStateToProps)(Announcements);","map":{"version":3,"sources":["/Users/star/Desktop/frontend-srm/src/app/home/studentHome/Announcements.js"],"names":["React","useState","useEffect","connect","useLocation","makeStyles","InfiniteScroll","Typography","CircularProgress","AnnouncementCard","HomeService","set","useStyles","theme","loading","width","textAlign","paddingTop","fontSize","Announcements","props","location","classes","announcements","setAnnouncements","hasMore","setHasMore","currentPage","setCurrentPage","isAnnouncementLoading","fetchData","token","localStorage","getItem","selectedRole","response","fetchAnnouncements","status","data","current_page","last_page","e","console","log","fetchAnnouncementOnScroll","error","content","map","announcement","index","length","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { Typography } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport AnnouncementCard from \"./AnnouncementCard\";\nimport HomeService from \"../HomeSerivce\";\nimport { set } from \"date-fns\";\nconst useStyles = makeStyles((theme) => ({\n  loading: {\n    width: \"100%\",\n    textAlign: \"center\",\n    paddingTop: \"8px\",\n    fontSize: \"20px\",\n  },\n}));\n\nconst Announcements = (props) => {\n  const location = useLocation();\n  const classes = useStyles();\n  const [announcements, setAnnouncements] = useState([]);\n  const [hasMore, setHasMore] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // const [isAnnouncementLoading, setIsAnnouncementLoading] = useState(true);\n  useEffect(() => {\n    // if (isAnnouncementLoading) {\n    let isAnnouncementLoading = true;\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem(\"srmToken\");\n        const selectedRole = props.selectedRole;\n        const response = await HomeService.fetchAnnouncements(\n          { selectedRole, currentPage },\n          token\n        );\n\n        if (response.status === 200) {\n          if (\n            response.data.data.current_page === response.data.data.last_page\n          ) {\n            if (isAnnouncementLoading) {\n              setAnnouncements([...announcements, ...response.data.data.data]);\n              setHasMore(false);\n            }\n          } else {\n            if (isAnnouncementLoading) {\n              setAnnouncements([...announcements, ...response.data.data.data]);\n              setCurrentPage(currentPage + 1);\n            }\n          }\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchData();\n\n    return () => {\n      isAnnouncementLoading = false;\n    };\n  }, []);\n\n  const fetchAnnouncementOnScroll = async () => {\n    try {\n      const token = localStorage.getItem(\"srmToken\");\n      const selectedRole = props.selectedRole;\n      const response = await HomeService.fetchAnnouncements(\n        { selectedRole, currentPage },\n        token\n      );\n\n      if (response.status === 200) {\n        if (response.data.data.current_page !== response.data.data.last_page) {\n          setAnnouncements([...announcements, ...response.data.data.data]);\n          setCurrentPage(currentPage + 1);\n        } else {\n          setAnnouncements([...announcements, ...response.data.data.data]);\n\n          setHasMore(false);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  let content = announcements.map((announcement, index) => {\n    return <AnnouncementCard key={index} announcement={announcement} />;\n  });\n  return (\n    <InfiniteScroll\n      dataLength={announcements.length}\n      next={fetchAnnouncementOnScroll}\n      hasMore={hasMore}\n      loader={\n        <>\n          <div className={classes.loading}>\n            {/* <Typography>Loading...</Typography> */}\n            <CircularProgress color=\"primary\" size={30} />\n          </div>\n          <br />\n        </>\n      }\n      scrollableTarget=\"scrollable\"\n      scrollThreshold={0.2}\n    >\n      {content}\n    </InfiniteScroll>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    selectedRole: state.auth.selectedRole,\n  };\n};\n\nexport default connect(mapStateToProps)(Announcements);\n"]},"metadata":{},"sourceType":"module"}