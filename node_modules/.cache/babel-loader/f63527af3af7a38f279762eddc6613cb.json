{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\n/* Initiated from middleware */\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\n/* Initiated from middleware */\n\nexport const authSuccess = authData => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    authData: authData\n  };\n};\n/* Initiated from middleware */\n\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\n/* Initiated from UI */\n\nexport const authUser = (userName, password) => {\n  return {\n    type: actionTypes.AUTH_USER,\n    userName: userName,\n    password: password\n  };\n};\n/* Initiated from UI */\n\nexport const logout = isAuthenticated => {\n  return {\n    type: actionTypes.AUTH_INITIATE_LOGOUT,\n    isAuthenticated: isAuthenticated\n  };\n};\n/* Initiated from middleware */\n\nexport const logoutSucceed = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT\n  };\n};\nexport const authCheckState = isAuthenticated => {\n  return {\n    type: actionTypes.AUTH_CHECK_STATE,\n    isAuthenticated: isAuthenticated\n  };\n};\nexport const checkAuthTimeout = (expirationDate, isAuthenticated) => {\n  return {\n    type: actionTypes.AUTH_CHECK_TIMEOUT,\n    expirationDate: expirationDate,\n    isAuthenticated: isAuthenticated\n  };\n};\n/* Called from UI - User clicking on a role card */\n\nexport const authRoleSelection = role => {\n  return {\n    type: actionTypes.AUTH_ROLE_SELECTION,\n    selectedRole: role\n  };\n};\n/* Action to denote successful role change*/\n\nexport const authRoleSelectionSucceed = role => {\n  return {\n    type: actionTypes.AUTH_ROLE_SELECTION_SUCCESS,\n    selectedRole: role\n  };\n};\n/* Changes the 'ChangeRole' to true */\n\nexport const authInitiateRoleSelection = () => {\n  return {\n    type: actionTypes.AUTH_INITIATE_ROLE_SELECTION\n  };\n};","map":{"version":3,"sources":["/Users/star/Desktop/frontend-srm/src/app/auth/store/actions.js"],"names":["actionTypes","authStart","type","AUTH_START","authSuccess","authData","AUTH_SUCCESS","authFail","error","AUTH_FAIL","authUser","userName","password","AUTH_USER","logout","isAuthenticated","AUTH_INITIATE_LOGOUT","logoutSucceed","AUTH_LOGOUT","authCheckState","AUTH_CHECK_STATE","checkAuthTimeout","expirationDate","AUTH_CHECK_TIMEOUT","authRoleSelection","role","AUTH_ROLE_SELECTION","selectedRole","authRoleSelectionSucceed","AUTH_ROLE_SELECTION_SUCCESS","authInitiateRoleSelection","AUTH_INITIATE_ROLE_SELECTION"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADb,GAAP;AAGD,CAJM;AAMP;;AACA,OAAO,MAAMC,WAAW,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLH,IAAAA,IAAI,EAAEF,WAAW,CAACM,YADb;AAELD,IAAAA,QAAQ,EAAEA;AAFL,GAAP;AAID,CALM;AAOP;;AACA,OAAO,MAAME,QAAQ,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLN,IAAAA,IAAI,EAAEF,WAAW,CAACS,SADb;AAELD,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CALM;AAOP;;AACA,OAAO,MAAME,QAAQ,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC9C,SAAO;AACLV,IAAAA,IAAI,EAAEF,WAAW,CAACa,SADb;AAELF,IAAAA,QAAQ,EAAEA,QAFL;AAGLC,IAAAA,QAAQ,EAAEA;AAHL,GAAP;AAKD,CANM;AAQP;;AACA,OAAO,MAAME,MAAM,GAAIC,eAAD,IAAqB;AACzC,SAAO;AACLb,IAAAA,IAAI,EAAEF,WAAW,CAACgB,oBADb;AAELD,IAAAA,eAAe,EAAEA;AAFZ,GAAP;AAID,CALM;AAOP;;AACA,OAAO,MAAME,aAAa,GAAG,MAAM;AACjC,SAAO;AACLf,IAAAA,IAAI,EAAEF,WAAW,CAACkB;AADb,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAIJ,eAAD,IAAqB;AACjD,SAAO;AACLb,IAAAA,IAAI,EAAEF,WAAW,CAACoB,gBADb;AAELL,IAAAA,eAAe,EAAEA;AAFZ,GAAP;AAID,CALM;AAOP,OAAO,MAAMM,gBAAgB,GAAG,CAACC,cAAD,EAAiBP,eAAjB,KAAqC;AACnE,SAAO;AACLb,IAAAA,IAAI,EAAEF,WAAW,CAACuB,kBADb;AAELD,IAAAA,cAAc,EAAEA,cAFX;AAGLP,IAAAA,eAAe,EAAEA;AAHZ,GAAP;AAKD,CANM;AAQP;;AACA,OAAO,MAAMS,iBAAiB,GAAIC,IAAD,IAAU;AACzC,SAAO;AACLvB,IAAAA,IAAI,EAAEF,WAAW,CAAC0B,mBADb;AAELC,IAAAA,YAAY,EAAEF;AAFT,GAAP;AAID,CALM;AAOP;;AACA,OAAO,MAAMG,wBAAwB,GAAIH,IAAD,IAAU;AAChD,SAAO;AACLvB,IAAAA,IAAI,EAAEF,WAAW,CAAC6B,2BADb;AAELF,IAAAA,YAAY,EAAEF;AAFT,GAAP;AAID,CALM;AAOP;;AACA,OAAO,MAAMK,yBAAyB,GAAG,MAAM;AAC7C,SAAO;AACL5B,IAAAA,IAAI,EAAEF,WAAW,CAAC+B;AADb,GAAP;AAGD,CAJM","sourcesContent":["import * as actionTypes from \"./actionTypes\";\n\n/* Initiated from middleware */\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START,\n  };\n};\n\n/* Initiated from middleware */\nexport const authSuccess = (authData) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    authData: authData,\n  };\n};\n\n/* Initiated from middleware */\nexport const authFail = (error) => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error,\n  };\n};\n\n/* Initiated from UI */\nexport const authUser = (userName, password) => {\n  return {\n    type: actionTypes.AUTH_USER,\n    userName: userName,\n    password: password,\n  };\n};\n\n/* Initiated from UI */\nexport const logout = (isAuthenticated) => {\n  return {\n    type: actionTypes.AUTH_INITIATE_LOGOUT,\n    isAuthenticated: isAuthenticated,\n  };\n};\n\n/* Initiated from middleware */\nexport const logoutSucceed = () => {\n  return {\n    type: actionTypes.AUTH_LOGOUT,\n  };\n};\n\nexport const authCheckState = (isAuthenticated) => {\n  return {\n    type: actionTypes.AUTH_CHECK_STATE,\n    isAuthenticated: isAuthenticated,\n  };\n};\n\nexport const checkAuthTimeout = (expirationDate, isAuthenticated) => {\n  return {\n    type: actionTypes.AUTH_CHECK_TIMEOUT,\n    expirationDate: expirationDate,\n    isAuthenticated: isAuthenticated,\n  };\n};\n\n/* Called from UI - User clicking on a role card */\nexport const authRoleSelection = (role) => {\n  return {\n    type: actionTypes.AUTH_ROLE_SELECTION,\n    selectedRole: role,\n  };\n};\n\n/* Action to denote successful role change*/\nexport const authRoleSelectionSucceed = (role) => {\n  return {\n    type: actionTypes.AUTH_ROLE_SELECTION_SUCCESS,\n    selectedRole: role,\n  };\n};\n\n/* Changes the 'ChangeRole' to true */\nexport const authInitiateRoleSelection = () => {\n  return {\n    type: actionTypes.AUTH_INITIATE_ROLE_SELECTION,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}